/******************************************************
*
* TYPE.LESS
*
* Set differents mixins for styles
* Table of content:
* 01 - TITLES
* 02 - PARAGRAPHS
*
* TODO
* SMALL CAPS
* Probleme avec rem => pas de recalcul de la taille des titres et "small text" ... repasser en em ? (parceque bon c'est plus simple quand meme... a voir)
* autre option => créer une fonction "update-font" qui recalcule les size-a, size-b… etc. et permet, a partir d'une taille de typo de réinitialiser la totale) en calculant a partir du ratio "nouvelle taille" / taille de base (@fontsize)
les élément a réinitialiser (ou initialiser) seraient =>
size-a … size-i & size-small, size-smaller
h1 => h6
.base-type();

SIMPLIFIER LE PROCESS
on choisi une basesize (la taille par défaut, 16px pour référence correspondant à 100% dans les navigateurs)
	on choii une unité de base (px / em / rem)
	on choisi une échelle typo (rem = em jusqu'ici)
	OU ALORS, 
	on choisi une taille de base seulement et un type d'échelle (les autre tailles seront calculée automatiquement)

	on choisi les marges

	cf
http://type-scale.com/


PAR AILLEURS
ajouter des bool pour les indent, pilcrow… etc
qui serviront à définir si oui ou non on génére la classe

DONC +>
   SI "px" alors .modular-scale(@unit, @scale) when ispixel(@unit)
   Si "em" alors .modular-scale(@unit, @scale) when isem(@unit)
   Si "rem" alors .modular-scale(@unit, @scale) when not(ispixel(@unit)) and not(when isem(@unit))
      ici on utilise la mixins

FONCTION "createSize"
   Si à la main (mot clef "none" pour ratio) => passer directement au lacement de modularescale
   Si on à rentré un ratio OU un mot clef,
   	calculer les values de .size-a , b , c etc

*******************************************************/
/******************************************************
* 01 - EXCLUSIVE FONT VARIABLES 
* based on the awesome work of Zachary Kain (@zakkain) 
* & Dennis Gaebel (@gryghostvisuals) for
* http://typeplate.com
*******************************************************/
@basesize-body 		: (@basesize * 100/16); // conversion in em/rem for body if html is set to 100% (16 is default size in browser)

/******************************************************
* 01 - EXCLUSIVE FONT MIXINS 
* based on the awesome work of Zachary Kain (@zakkain) 
* & Dennis Gaebel (@gryghostvisuals) for
* http://typeplate.com
*******************************************************/

// @Typographic scale
.modular-scale (@scale, @font-unit, @title:"") when (@font-unit = px){
	font-size: unit(@scale, @font-unit);
}

.modular-scale (@scale, @font-unit, @title:"") when not(@font-unit = px){
	.rem(unit(@scale, @font-unit));
}

.modular-scale (@scale, @font-unit, @title:true) when (@title=true) and(@font-unit = px) {
	font-size: unit(@scale, @font-unit);
	margin-top: @title-margin-top;
	margin-bottom: @title-margin-bottom;
}

.modular-scale (@scale, @font-unit, @title:true) when (@title=true) and not(@font-unit = px) {
	.rem(unit(@scale, @font-unit));
	margin-top: @title-margin-top;
	margin-bottom: @title-margin-bottom;
}


// generate the typographic scale if ratio is a variable or un number
/*
	Currently, less does not support dynamicly declared variables name,
	We'll do it by hand until then
	cf http://stackoverflow.com/questions/11198221/defining-variable-variables-using-less-css

	//  @sizes-list: a, b, c, d, e, f, g, small, smaller;
	// 	@length-sizes: length(@sizes-list);
	// 	.generate-size-at(@index) when (@index > 0){
	// 		@value: extract(@sizes-list, @index);
	// 		.generate-size-at-index() when (isnumber(~"@{@manual-size-@{value}}")){
	// 			~"@{@size-@{value}}": ~"@{@manual-size-@{value}}";
	// 		}
	// 		.generate-size-at-index() when not(isnumber(~"@{@manual-size-@{value}}")){
	// 			@old-value: extract(@sizes-list, @index-1);
	// 			~"@{@size-@{value}}": ~"@{@manual-size-@{old-value}}" * @typescale-ratio;
	// 		}
	// 		.generate-size-at-index(@index-1);
	// 	}
	// 	.generate-size-at(O){}
	// 	.generate-size-at(1);
*/
/*

OR BETTER => 

@sizes-list: a, b, c, d, e, f, g, small, smaller;
@length-sizes: length(@sizes-list);

.generate-size-at(@index) when (@index > 0){
	@value: extract(@sizes-list, @index);
	
	//if is number and base value
	.size-@{value} when (isnumber(~"@{@manual-size-@{value}}")) and (@index = 1){ 
		.modular-scale(~"@{@manual-size-@{value}}", @font-unit, true); 
	}
	
	//if is not number and base value
	.size-@{value} when not(isnumber(~"@{@manual-size-@{value}}")) and (@index = 1){ 
		.modular-scale(@fontsize, @font-unit, true); 
	}

	//if is number and not base value
	.size-@{value} when (isnumber(~"@{@manual-size-@{value}}")) and not(@index = 1){ 
		.modular-scale(~"@{@manual-size-@{value}}", @font-unit, true); 
	}
	
	//if is not number and not base value
	.size-@{value} when not(isnumber(~"@{@manual-size-@{value}}")) and not(@index = 1){ 
		@minor-value: extract(@sizes-list, @index - 1);
		.modular-scale((~"@{@manual-size-@{minor-value}}" * @typescale-ratio), @font-unit, true); 
	}

	//if SMALL is not number and not base value
	.size-@{value} when not(isnumber(~"@{@manual-size-@{value}}")) and (@value = small) and not(@index = 1){ 
		@minor-value: extract(@sizes-list, 1); //size-a
		.modular-scale((~"@{@manual-size-@{minor-value}}" / @typescale-ratio), @font-unit, true); 
	}

	//if SMALLER is not number and not base value
	.size-@{value} when not(isnumber(~"@{@manual-size-@{value}}")) and (@value = small) and not(@index = 1){ 
		@minor-value: extract(@sizes-list, @index - 1); //size-small
		.modular-scale((~"@{@manual-size-@{minor-value}}" / @typescale-ratio), @font-unit, true); 
	}

	//recursive
	.generate-size-at(@index - 1);
}

.generate-size-at(0){}
.generate-size-at(1);

*/
// generate @size-a
.generate-size-a() when not(isnumber(@manual-size-a)){
	@size-a: @fontsize;
}
.generate-size-a() when (isnumber(@manual-size-a)){
	@size-a: @manual-size-a;
}
// generate @size-b
.generate-size-b() when not(isnumber(@manual-size-b)){
	@size-b: @size-a * @typescale-ratio;
}
.generate-size-b() when (isnumber(@manual-size-b)){
	@size-b: @manual-size-b;
}
// generate @size-c
.generate-size-c() when not(isnumber(@manual-size-c)){
	@size-c: @size-a * @typescale-ratio;
}
.generate-size-c() when (isnumber(@manual-size-c)){
	@size-c: @manual-size-c;
}
// generate @size-d
.generate-size-d() when not(isnumber(@manual-size-d)){
	@size-d: @size-c * @typescale-ratio;
}
.generate-size-d() when (isnumber(@manual-size-d)){
	@size-d: @manual-size-d;
}
// generate @size-e
.generate-size-e() when not(isnumber(@manual-size-e)){
	@size-e: @size-d * @typescale-ratio;
}
.generate-size-e() when (isnumber(@manual-size-e)){
	@size-e: @manual-size-e;
}
// generate @size-f
.generate-size-f() when not(isnumber(@manual-size-f)){
	@size-f: @size-e * @typescale-ratio;
}
.generate-size-f() when (isnumber(@manual-size-f)){
	@size-f: @manual-size-f;
}
// generate @size-g
.generate-size-g() when not(isnumber(@manual-size-g)){
	@size-g: @size-f * @typescale-ratio;
}
.generate-size-g() when (isnumber(@manual-size-g)){
	@size-g: @manual-size-g;
}
// generate @size-small
.generate-size-small() when not(isnumber(@manual-size-small)){
	@size-small: @size-a / @typescale-ratio;
}
.generate-size-small() when (isnumber(@manual-size-small)){
	@size-small: @manual-size-small;
}
// generate @size-smaller
.generate-size-smaller() when not(isnumber(@manual-size-smaller)){
	@size-smaller: @size-small / @typescale-ratio;
}
.generate-size-smaller() when (isnumber(@manual-size-smaller)){
	@size-smaller: @manual-size-smaller;
}

// if ratio = "none", do nothing
// lanch fonctions
.generate-size-a();
.generate-size-b();
.generate-size-c();
.generate-size-d();
.generate-size-e();
.generate-size-f();
.generate-size-g();
.generate-size-small();
.generate-size-smaller();



//create a class for the different size in the class
//would be in da loop
.size-a 		{ .modular-scale(@size-a, @font-unit, true); }
.size-b 		{ .modular-scale(@size-b, @font-unit, true); }
.size-c			{ .modular-scale(@size-c, @font-unit, true); }
.size-d 		{ .modular-scale(@size-d, @font-unit, true); }
.size-e 		{ .modular-scale(@size-e, @font-unit, true); } 
.size-f 		{ .modular-scale(@size-f, @font-unit, true); }
.size-g 		{ .modular-scale(@size-g, @font-unit, true); }
.size-small 	{ .modular-scale(@size-small, @font-unit); }
.size-smaller 	{ .modular-scale(@size-smaller, @font-unit); }

//set font function
.base-type(@weight, @lineheight, @fontsize, @font-family) when (@font-unit = px){
	font: @weight ~"@{fontsize}px/@{lineheight}" @font-family;
}
.base-type(@weight, @lineheight, @fontsize, @font-family) when not(@font-unit = px){
	font: @weight ~"@{basesize-body}%/@{lineheight}" @font-family;
}

//paragraph settings
.leading() when (@paragraph-leading = true){
	margin: @p-margin-top 0 @p-margin-bottom;
}
.indent() when (@paragraph-indent = true){
	margin: 0;
	&+p{
		text-indent: @indent-value;
		&:before{
			content: none;
		}
	}
}
//dropcaps adapted from Ian Devlin
//http://www.iandevlin.com/blog/2012/04/css/cross-browser-drop-caps-with-css
.dropcap() when (@paragraph-dropcap = true){
	margin: 0 0 @font-margin;
	&:first-letter { 
		float:left; 
		font-size:350%; 
		height:.7em; 
		line-height:.85em; 		
		*line-height:1em; /* IE7 Only */ 
		padding:0 .1em 0 0; 
	}
	&:before{
		content: none;
	}
	&+p:first-letter {
		float:none; 
		font-size:1em; 
		height:auto; 
		line-height:@lineheight; 		
		padding:0; 
	}
}
.pilcrow() when (@paragraph-pilcrow = true){
	margin: 0;	
	position: relative;
	&:before{
		content: "\00B6";
		display: inline-block; //make hack for ie7
		left:-0.9em;
		position: absolute;
	}
}
.rule() when (@paragraph-rule = true){
	border-bottom: 1px solid @body-color;
	padding-bottom: @p-margin-bottom; margin-bottom: @p-margin-bottom - 0.1em;		
	text-indent: 0;
	&:last-of-type{
		//Only works in ie9 !!!!
		border:none;
	}
}

/******************************************************
* 01 - SET BASE FONT
*******************************************************/
html{
	.base-type(@weight, @lineheight, @fontsize, @sans-serif);
}

body{
	//set break words, hyphen and color
	color: @body-color;
}

/******************************************************
* 01 - TITLES
*
* Put your styles for headings here
*******************************************************/
h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6{
	color: @heading-color;
	font-family: @sans-serif;
	text-rendering: optimizeLegibility;	// fix kerning
	line-height: 1.2; // better spaces between 2 lines headings
	font-weight: 700;
}

h1, .h1{
	.size-f;
}
h2, .h2{
	.size-e;
}
h3, .h3{
	.size-d;
}
h4, .h4{
	.size-c;
}
h5, .h5{
	.size-b;
}
h6, .h6{
	.size-a;
}
p{
	.size-a;
}

/******************************************************
* 01 - INITIALISATION PARAGRAPH
*******************************************************/


.initParagraphStyle() when (@paragraph-style = "leading"){
	p{ 
		.leading();
	}
}
.initParagraphStyle() when (@paragraph-style = "indent"){
	p{
		.indent();
	}
}
.initParagraphStyle() when (@paragraph-style = "dropcap"){
	p{
		.dropcap();
		.indent();
	}
}
.initParagraphStyle() when (@paragraph-style = "pilcrow"){
	p{
		.pilcrow();
	}
}
.initParagraphStyle() when (@paragraph-style = "rule"){
	p{
		.rule();
	}
}

.initParagraphStyle();


/******************************************************
* 01 - PARAGRAPH STYLES
* options:
* A extra leading (default) margin bottom = lineheight (150% - 165%)
* B Indent
* C dropcap
* D Graphic element (pilcrow)
* E Rule
*******************************************************/

.leading when (@paragraph-leading = true){
	p{
		.leading();
	}
	&p{
		.leading();
	}
}
.dropcap when (@paragraph-dropcap = true){
	p:first-child {
		.dropcap();
	}
	&p{
		.dropcap();
	}
}
.indent when (@paragraph-indent = true){
	p{
		.indent();
	}
	&p{
		.indent();
	}
}
.pilcrow when (@paragraph-pilcrow = true){
	p{
		.pilcrow();
	}
	&p{
		.pilcrow();
	}
}
/*
On  garde ca ?
.inline-pilcrow{
	p{
		margin-top: 0;
		margin-bottom: 0;	
		position: relative;
		&:before{
			content: "\00B6";
			margin-right: 0.4em;
			position: relative;
		}
	}
}
*/
.rule when (@paragraph-rule = true){
	p{
		.rule();
	}
	&p{
		.rule();
	}
}

/******************************************************
* 01 - other sizes
*******************************************************/

.small-text{
	p{
		.size-small;
		&:first-child{
			margin-top: .3em;
		}
	}
}

.smaller-text{
	p{
		.size-smaller;
		&:first-child{
			margin-top: .3em;
		}
	}
}

.small{
	.size-smaller;
}

/******************************************************
* 01 - LINKS
*******************************************************/
a{
	color: @link-color;
	text-decoration: none;
	//.transition;
	&:hover{
		color: @hover-color;
	}
}

/******************************************************
* 01 - BLOCKQUOTES
*******************************************************/
blockquote{
	&:before,
	&:after {
		//definir les tailles des quotes
	}
	&:before {
		//content avant
	}
	&:after {
		//content après
	}
}

/******************************************************
* 01 - FIGURES
*******************************************************/
figure{
	figcaption{
		.size-small();
		font-style: italic;
		margin-bottom: @margin-bottom;
		strong{
			font-style:normal;
		}
	}
}

/******************************************************
* 01 - CODE RELATED
*******************************************************/
pre{
	display: block;
	font-weight: 400;
	border: 1px solid @grey;
	font-family: @mono;
	.size-small();
	padding: @p-margin-bottom;
	white-space: pre;
	white-space: pre-wrap;
	word-break: break-all;
	word-wrap: break-word;
	code{
		background: none;
		border: none;
		padding: 0;
	}
}

code{
	background-color: darken(@bg-light, 4%);
	border: 1px solid @grey;
	border: 1px solid rgba(0, 0, 0, 0.15);	
	font-family: @mono;
	font-weight: 400;
	padding: 1px 6px;
	font-size: 0.8em;
}

/******************************************************
* 01 - LISTS
*******************************************************/
//unordered list
ul{
	margin: @p-margin-bottom 0;
	padding: 0;
	li{
		//sublist
		ul, ol{
			margin: 0 0 0 @indent-value;
			li{

			}
		}
	}

	&.custom{
		list-style: none;
		li{
			&:before {
				content:'☞';
				color: @primary;
				margin-right:@p-margin-bottom;
			}

			ul, ol{
				list-style: none;
				li{
					&:before {
						content:'✍';
					}
				}
			}
		}
	}
}

//ordered list
ol{
	margin: @p-margin-bottom 0;
	padding: 0;
	li{

		//sublist
		ol,ul{
			margin: 0 0 0 @indent-value;
			li{

			}
		}
	}
}
//definition list
dl{
	dt{
		font-weight: bold;
		.size-a;
		margin-bottom:0;
	}
	dd{
		.size-small;
		margin-left: @indent-value;
	}

	&.dictionary-style{
		dt{
			counter-reset: definitions;
		}
		dd{
			counter-increment: definitions;
			&:before {
				content: counter(definitions, decimal) ". ";
				color: @primary;
			}
		}
	}
}

/******************************************************
* 01 - MISC
*******************************************************/
b{}
strong{}
em{}
u{}
sub{}
sup{}
small, .small{}
abbr {
	font-variant:small-caps;
	&:hover {
		cursor: help;
	}
}

hr{
	border: 0;
	border-top: 1px solid @lighter-grey;
	border-bottom: 1px solid @white;
	margin: @p-margin-bottom 0;
	&.soften{
		
	}
}

.highlighted{
	background-color: @alert-green;
	margin-left: -0.1em; margin-right: -0.1em;
	padding-left: 0.1em; padding-right: 0.1em;
}


